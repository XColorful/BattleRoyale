plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.112'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        configureEach {
            systemProperty 'neoforge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }

        client {
            client()
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
            programArgument '--nogui'
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        "${project.mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

tasks.withType(ProcessResources).configureEach {
    from(project(':core').sourceSets.main.resources)

    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            neo_loader_version_range: neo_loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [
                loader_version_range: project.neo_loader_version_range,
                target_modloader: 'neoforge',
                target_version_range: project.neo_version_range,
                project: project
        ]
    }
}

def journeymap_api_version = "2.0.0-1.21.1-SNAPSHOT"

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation project(":core")

    compileOnly "info.journeymap:journeymap-api-neoforge:${journeymap_api_version}"
    runtimeOnly "curse.maven:journeymap-32274:6689206"
}

tasks.named('jar', Jar).configure {
    archiveBaseName.set("battleroyale")
    archiveVersion.set(mod_version)
    archiveClassifier.set("neoforge1.21.1")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(':core').sourceSets.main.output
}