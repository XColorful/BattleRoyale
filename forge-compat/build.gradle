plugins {
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    reobf = false
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

tasks.withType(ProcessResources).configureEach {
    from(project(':core').sourceSets.main.resources)

    var replaceProperties = [
            minecraft_version: project.minecraft_version,
            minecraft_version_range: project.minecraft_version_range,
            mod_id: project.mod_id,
            mod_name: project.mod_name,
            mod_license: project.mod_license,
            mod_version: project.mod_version,
            mod_authors: project.mod_authors,
            mod_description: project.mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [
                loader_version_range: project.property('forge_loader_version_range'),
                target_modloader: 'forge',
                target_version_range: project.property('forge_version_range'),
                project: project
        ]
    }
}

def journeymap_api_version = "2.0.0-1.21.1-SNAPSHOT"

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation project(":core")

    compileOnly fg.deobf("info.journeymap:journeymap-api-forge:${journeymap_api_version}")
    runtimeOnly fg.deobf("curse.maven:journeymap-32274:6689204")
}

tasks.named('jar', Jar).configure {
    archiveBaseName.set("battleroyale")
    archiveVersion.set(mod_version)
    archiveClassifier.set("forge1.21.1")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(':core').sourceSets.main.output
}

tasks.matching { it.name == 'remapJar' || it.name == 'reobfJar' }.configureEach {
    if (it.hasProperty("archiveClassifier")) {
        it.archiveBaseName.set("battleroyale")
        it.archiveVersion.set(mod_version)
        it.archiveClassifier.set("forge1.21.1")
    }
}